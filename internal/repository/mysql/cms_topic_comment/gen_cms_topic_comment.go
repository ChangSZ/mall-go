///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package cms_topic_comment

import (
	"fmt"
	"time"

	"github.com/ChangSZ/mall-go/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *CmsTopicComment {
	return new(CmsTopicComment)
}

func NewQueryBuilder() *cmsTopicCommentQueryBuilder {
	return new(cmsTopicCommentQueryBuilder)
}

func (t *CmsTopicComment) Create(db *gorm.DB) (id int64, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type cmsTopicCommentQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *cmsTopicCommentQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	if qb.limit != 0 {
		ret = ret.Limit(qb.limit)
	}
	ret = ret.Offset(qb.offset)
	return ret
}

func (qb *cmsTopicCommentQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (int64, error) {
	db = db.Model(&CmsTopicComment{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	ret := db.Updates(m)
	err := ret.Error
	if err != nil {
		return 0, errors.Wrap(err, "updates err")
	}
	return ret.RowsAffected, nil
}

func (qb *cmsTopicCommentQueryBuilder) Delete(db *gorm.DB) (int64, error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	ret := db.Delete(&CmsTopicComment{})
	err := ret.Error
	if err != nil {
		return 0, errors.Wrap(err, "delete err")
	}
	return ret.RowsAffected, nil
}

func (qb *cmsTopicCommentQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&CmsTopicComment{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *cmsTopicCommentQueryBuilder) First(db *gorm.DB) (*CmsTopicComment, error) {
	ret := &CmsTopicComment{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *cmsTopicCommentQueryBuilder) QueryOne(db *gorm.DB) (*CmsTopicComment, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *cmsTopicCommentQueryBuilder) QueryAll(db *gorm.DB) ([]*CmsTopicComment, error) {
	var ret []*CmsTopicComment
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *cmsTopicCommentQueryBuilder) Limit(limit int) *cmsTopicCommentQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) Offset(offset int) *cmsTopicCommentQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereId(p mysql.Predicate, value int64) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereIdIn(value []int64) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereIdNotIn(value []int64) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) OrderById(asc bool) *cmsTopicCommentQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereMemberNickName(p mysql.Predicate, value string) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "member_nick_name", p),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereMemberNickNameIn(value []string) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "member_nick_name", "IN"),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereMemberNickNameNotIn(value []string) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "member_nick_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) OrderByMemberNickName(asc bool) *cmsTopicCommentQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "member_nick_name "+order)
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereTopicId(p mysql.Predicate, value int64) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "topic_id", p),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereTopicIdIn(value []int64) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "topic_id", "IN"),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereTopicIdNotIn(value []int64) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "topic_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) OrderByTopicId(asc bool) *cmsTopicCommentQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "topic_id "+order)
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereMemberIcon(p mysql.Predicate, value string) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "member_icon", p),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereMemberIconIn(value []string) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "member_icon", "IN"),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereMemberIconNotIn(value []string) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "member_icon", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) OrderByMemberIcon(asc bool) *cmsTopicCommentQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "member_icon "+order)
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereContent(p mysql.Predicate, value string) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", p),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereContentIn(value []string) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", "IN"),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereContentNotIn(value []string) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) OrderByContent(asc bool) *cmsTopicCommentQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "content "+order)
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereCreateTime(p mysql.Predicate, value time.Time) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", p),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereCreateTimeIn(value []time.Time) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "IN"),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereCreateTimeNotIn(value []time.Time) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) OrderByCreateTime(asc bool) *cmsTopicCommentQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "create_time "+order)
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereShowStatus(p mysql.Predicate, value int32) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "show_status", p),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereShowStatusIn(value []int32) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "show_status", "IN"),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) WhereShowStatusNotIn(value []int32) *cmsTopicCommentQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "show_status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cmsTopicCommentQueryBuilder) OrderByShowStatus(asc bool) *cmsTopicCommentQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "show_status "+order)
	return qb
}
