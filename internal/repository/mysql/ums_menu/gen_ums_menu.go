///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package ums_menu

import (
	"fmt"
	"time"

	"github.com/ChangSZ/mall-go/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *UmsMenu {
	return new(UmsMenu)
}

func NewQueryBuilder() *umsMenuQueryBuilder {
	return new(umsMenuQueryBuilder)
}

func (t *UmsMenu) Create(db *gorm.DB) (id int64, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type umsMenuQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *umsMenuQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	if qb.limit != 0 {
		ret = ret.Limit(qb.limit)
	}
	ret = ret.Offset(qb.offset)
	return ret
}

func (qb *umsMenuQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&UmsMenu{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *umsMenuQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&UmsMenu{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *umsMenuQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&UmsMenu{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *umsMenuQueryBuilder) First(db *gorm.DB) (*UmsMenu, error) {
	ret := &UmsMenu{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *umsMenuQueryBuilder) QueryOne(db *gorm.DB) (*UmsMenu, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *umsMenuQueryBuilder) QueryAll(db *gorm.DB) ([]*UmsMenu, error) {
	var ret []*UmsMenu
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *umsMenuQueryBuilder) Limit(limit int) *umsMenuQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *umsMenuQueryBuilder) Offset(offset int) *umsMenuQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *umsMenuQueryBuilder) WhereId(p mysql.Predicate, value int64) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereIdIn(value []int64) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereIdNotIn(value []int64) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) OrderById(asc bool) *umsMenuQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *umsMenuQueryBuilder) WhereParentId(p mysql.Predicate, value int64) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_id", p),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereParentIdIn(value []int64) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_id", "IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereParentIdNotIn(value []int64) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) OrderByParentId(asc bool) *umsMenuQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "parent_id "+order)
	return qb
}

func (qb *umsMenuQueryBuilder) WhereCreateTime(p mysql.Predicate, value time.Time) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", p),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereCreateTimeIn(value []time.Time) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereCreateTimeNotIn(value []time.Time) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) OrderByCreateTime(asc bool) *umsMenuQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "create_time "+order)
	return qb
}

func (qb *umsMenuQueryBuilder) WhereTitle(p mysql.Predicate, value string) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", p),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereTitleIn(value []string) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", "IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereTitleNotIn(value []string) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) OrderByTitle(asc bool) *umsMenuQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "title "+order)
	return qb
}

func (qb *umsMenuQueryBuilder) WhereLevel(p mysql.Predicate, value int32) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "level", p),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereLevelIn(value []int32) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "level", "IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereLevelNotIn(value []int32) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "level", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) OrderByLevel(asc bool) *umsMenuQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "level "+order)
	return qb
}

func (qb *umsMenuQueryBuilder) WhereSort(p mysql.Predicate, value int32) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sort", p),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereSortIn(value []int32) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sort", "IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereSortNotIn(value []int32) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sort", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) OrderBySort(asc bool) *umsMenuQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "sort "+order)
	return qb
}

func (qb *umsMenuQueryBuilder) WhereName(p mysql.Predicate, value string) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", p),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereNameIn(value []string) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereNameNotIn(value []string) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) OrderByName(asc bool) *umsMenuQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "name "+order)
	return qb
}

func (qb *umsMenuQueryBuilder) WhereIcon(p mysql.Predicate, value string) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "icon", p),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereIconIn(value []string) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "icon", "IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereIconNotIn(value []string) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "icon", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) OrderByIcon(asc bool) *umsMenuQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "icon "+order)
	return qb
}

func (qb *umsMenuQueryBuilder) WhereHidden(p mysql.Predicate, value int32) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "hidden", p),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereHiddenIn(value []int32) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "hidden", "IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) WhereHiddenNotIn(value []int32) *umsMenuQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "hidden", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsMenuQueryBuilder) OrderByHidden(asc bool) *umsMenuQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "hidden "+order)
	return qb
}
