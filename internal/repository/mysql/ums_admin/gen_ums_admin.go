///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package ums_admin

import (
	"fmt"
	"time"

	"github.com/ChangSZ/mall-go/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *UmsAdmin {
	return new(UmsAdmin)
}

func NewQueryBuilder() *umsAdminQueryBuilder {
	return new(umsAdminQueryBuilder)
}

func (t *UmsAdmin) Create(db *gorm.DB) (id int64, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type umsAdminQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *umsAdminQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	if qb.limit != 0 {
		ret = ret.Limit(qb.limit)
	}
	ret = ret.Offset(qb.offset)
	return ret
}

func (qb *umsAdminQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (int64, error) {
	db = db.Model(&UmsAdmin{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	ret := db.Updates(m)
	err := ret.Error
	if err != nil {
		return 0, errors.Wrap(err, "updates err")
	}
	return ret.RowsAffected, nil
}

func (qb *umsAdminQueryBuilder) Delete(db *gorm.DB) (int64, error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	ret := db.Delete(&UmsAdmin{})
	err := ret.Error
	if err != nil {
		return 0, errors.Wrap(err, "delete err")
	}
	return ret.RowsAffected, nil
}

func (qb *umsAdminQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&UmsAdmin{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *umsAdminQueryBuilder) First(db *gorm.DB) (*UmsAdmin, error) {
	ret := &UmsAdmin{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *umsAdminQueryBuilder) QueryOne(db *gorm.DB) (*UmsAdmin, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *umsAdminQueryBuilder) QueryAll(db *gorm.DB) ([]*UmsAdmin, error) {
	var ret []*UmsAdmin
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *umsAdminQueryBuilder) Limit(limit int) *umsAdminQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *umsAdminQueryBuilder) Offset(offset int) *umsAdminQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *umsAdminQueryBuilder) WhereId(p mysql.Predicate, value int64) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereIdIn(value []int64) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereIdNotIn(value []int64) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) OrderById(asc bool) *umsAdminQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *umsAdminQueryBuilder) WhereUsername(p mysql.Predicate, value string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "username", p),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereUsernameIn(value []string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "username", "IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereUsernameNotIn(value []string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "username", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) OrderByUsername(asc bool) *umsAdminQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "username "+order)
	return qb
}

func (qb *umsAdminQueryBuilder) WherePassword(p mysql.Predicate, value string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", p),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WherePasswordIn(value []string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", "IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WherePasswordNotIn(value []string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) OrderByPassword(asc bool) *umsAdminQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "password "+order)
	return qb
}

func (qb *umsAdminQueryBuilder) WhereIcon(p mysql.Predicate, value string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "icon", p),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereIconIn(value []string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "icon", "IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereIconNotIn(value []string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "icon", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) OrderByIcon(asc bool) *umsAdminQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "icon "+order)
	return qb
}

func (qb *umsAdminQueryBuilder) WhereEmail(p mysql.Predicate, value string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "email", p),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereEmailIn(value []string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "email", "IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereEmailNotIn(value []string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "email", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) OrderByEmail(asc bool) *umsAdminQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "email "+order)
	return qb
}

func (qb *umsAdminQueryBuilder) WhereNickName(p mysql.Predicate, value string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nick_name", p),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereNickNameIn(value []string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nick_name", "IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereNickNameNotIn(value []string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nick_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) OrderByNickName(asc bool) *umsAdminQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "nick_name "+order)
	return qb
}

func (qb *umsAdminQueryBuilder) WhereNote(p mysql.Predicate, value string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "note", p),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereNoteIn(value []string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "note", "IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereNoteNotIn(value []string) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "note", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) OrderByNote(asc bool) *umsAdminQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "note "+order)
	return qb
}

func (qb *umsAdminQueryBuilder) WhereCreateTime(p mysql.Predicate, value time.Time) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", p),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereCreateTimeIn(value []time.Time) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereCreateTimeNotIn(value []time.Time) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) OrderByCreateTime(asc bool) *umsAdminQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "create_time "+order)
	return qb
}

func (qb *umsAdminQueryBuilder) WhereLoginTime(p mysql.Predicate, value time.Time) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "login_time", p),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereLoginTimeIn(value []time.Time) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "login_time", "IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereLoginTimeNotIn(value []time.Time) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "login_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) OrderByLoginTime(asc bool) *umsAdminQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "login_time "+order)
	return qb
}

func (qb *umsAdminQueryBuilder) WhereStatus(p mysql.Predicate, value int32) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", p),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereStatusIn(value []int32) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) WhereStatusNotIn(value []int32) *umsAdminQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *umsAdminQueryBuilder) OrderByStatus(asc bool) *umsAdminQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "status "+order)
	return qb
}
