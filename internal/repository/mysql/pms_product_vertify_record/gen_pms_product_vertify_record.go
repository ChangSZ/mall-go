///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package pms_product_vertify_record

import (
	"fmt"
	"time"

	"github.com/ChangSZ/mall-go/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *PmsProductVertifyRecord {
	return new(PmsProductVertifyRecord)
}

func NewQueryBuilder() *pmsProductVertifyRecordQueryBuilder {
	return new(pmsProductVertifyRecordQueryBuilder)
}

func (t *PmsProductVertifyRecord) Create(db *gorm.DB) (id int64, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type pmsProductVertifyRecordQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *pmsProductVertifyRecordQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	if qb.limit != 0 {
		ret = ret.Limit(qb.limit)
	}
	ret = ret.Offset(qb.offset)
	return ret
}

func (qb *pmsProductVertifyRecordQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (int64, error) {
	db = db.Model(&PmsProductVertifyRecord{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	ret := db.Updates(m)
	err := ret.Error
	if err != nil {
		return 0, errors.Wrap(err, "updates err")
	}
	return ret.RowsAffected, nil
}

func (qb *pmsProductVertifyRecordQueryBuilder) Delete(db *gorm.DB) (int64, error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	ret := db.Delete(&PmsProductVertifyRecord{})
	err := ret.Error
	if err != nil {
		return 0, errors.Wrap(err, "delete err")
	}
	return ret.RowsAffected, nil
}

func (qb *pmsProductVertifyRecordQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&PmsProductVertifyRecord{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *pmsProductVertifyRecordQueryBuilder) First(db *gorm.DB) (*PmsProductVertifyRecord, error) {
	ret := &PmsProductVertifyRecord{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *pmsProductVertifyRecordQueryBuilder) QueryOne(db *gorm.DB) (*PmsProductVertifyRecord, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *pmsProductVertifyRecordQueryBuilder) QueryAll(db *gorm.DB) ([]*PmsProductVertifyRecord, error) {
	var ret []*PmsProductVertifyRecord
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *pmsProductVertifyRecordQueryBuilder) Limit(limit int) *pmsProductVertifyRecordQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) Offset(offset int) *pmsProductVertifyRecordQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereId(p mysql.Predicate, value int64) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereIdIn(value []int64) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereIdNotIn(value []int64) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) OrderById(asc bool) *pmsProductVertifyRecordQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereProductId(p mysql.Predicate, value int64) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "product_id", p),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereProductIdIn(value []int64) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "product_id", "IN"),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereProductIdNotIn(value []int64) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "product_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) OrderByProductId(asc bool) *pmsProductVertifyRecordQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "product_id "+order)
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereCreateTime(p mysql.Predicate, value time.Time) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", p),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereCreateTimeIn(value []time.Time) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "IN"),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereCreateTimeNotIn(value []time.Time) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) OrderByCreateTime(asc bool) *pmsProductVertifyRecordQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "create_time "+order)
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereVertifyMan(p mysql.Predicate, value string) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "vertify_man", p),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereVertifyManIn(value []string) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "vertify_man", "IN"),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereVertifyManNotIn(value []string) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "vertify_man", "NOT IN"),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) OrderByVertifyMan(asc bool) *pmsProductVertifyRecordQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "vertify_man "+order)
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereStatus(p mysql.Predicate, value int32) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", p),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereStatusIn(value []int32) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "IN"),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereStatusNotIn(value []int32) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) OrderByStatus(asc bool) *pmsProductVertifyRecordQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "status "+order)
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereDetail(p mysql.Predicate, value string) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "detail", p),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereDetailIn(value []string) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "detail", "IN"),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) WhereDetailNotIn(value []string) *pmsProductVertifyRecordQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "detail", "NOT IN"),
		value,
	})
	return qb
}

func (qb *pmsProductVertifyRecordQueryBuilder) OrderByDetail(asc bool) *pmsProductVertifyRecordQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "detail "+order)
	return qb
}
