///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package cms_member_report

import (
	"fmt"
	"time"

	"github.com/pkg/errors"
	"gorm.io/gorm"

	"github.com/ChangSZ/mall-go/internal/repository/mysql"
)

func NewModel() *CmsMemberReport {
	return new(CmsMemberReport)
}

func NewQueryBuilder() *cmsMemberReportQueryBuilder {
	return new(cmsMemberReportQueryBuilder)
}

func (t *CmsMemberReport) Create(db *gorm.DB) (id int64, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type cmsMemberReportQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *cmsMemberReportQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	if qb.limit != 0 {
		ret = ret.Limit(qb.limit)
	}
	ret = ret.Offset(qb.offset)
	return ret
}

func (qb *cmsMemberReportQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (int64, error) {
	db = db.Model(&CmsMemberReport{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	ret := db.Updates(m)
	err := ret.Error
	if err != nil {
		return 0, errors.Wrap(err, "updates err")
	}
	return ret.RowsAffected, nil
}

func (qb *cmsMemberReportQueryBuilder) Delete(db *gorm.DB) (int64, error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	ret := db.Delete(&CmsMemberReport{})
	err := ret.Error
	if err != nil {
		return 0, errors.Wrap(err, "delete err")
	}
	return ret.RowsAffected, nil
}

func (qb *cmsMemberReportQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&CmsMemberReport{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		return 0, nil
	}
	return c, res.Error
}

func (qb *cmsMemberReportQueryBuilder) First(db *gorm.DB) (*CmsMemberReport, error) {
	ret := &CmsMemberReport{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		return nil, nil
	}
	return ret, res.Error
}

func (qb *cmsMemberReportQueryBuilder) QueryOne(db *gorm.DB) (*CmsMemberReport, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *cmsMemberReportQueryBuilder) QueryAll(db *gorm.DB) ([]*CmsMemberReport, error) {
	var ret []*CmsMemberReport
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *cmsMemberReportQueryBuilder) Limit(limit int) *cmsMemberReportQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *cmsMemberReportQueryBuilder) Offset(offset int) *cmsMemberReportQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereId(p mysql.Predicate, value int64) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereIdIn(value []int64) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereIdNotIn(value []int64) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) OrderById(asc bool) *cmsMemberReportQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereReportType(p mysql.Predicate, value int32) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "report_type", p),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereReportTypeIn(value []int32) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "report_type", "IN"),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereReportTypeNotIn(value []int32) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "report_type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) OrderByReportType(asc bool) *cmsMemberReportQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "report_type "+order)
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereReportMemberName(p mysql.Predicate, value string) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "report_member_name", p),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereReportMemberNameIn(value []string) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "report_member_name", "IN"),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereReportMemberNameNotIn(value []string) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "report_member_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) OrderByReportMemberName(asc bool) *cmsMemberReportQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "report_member_name "+order)
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereCreateTime(p mysql.Predicate, value time.Time) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", p),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereCreateTimeIn(value []time.Time) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "IN"),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereCreateTimeNotIn(value []time.Time) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) OrderByCreateTime(asc bool) *cmsMemberReportQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "create_time "+order)
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereReportObject(p mysql.Predicate, value string) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "report_object", p),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereReportObjectIn(value []string) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "report_object", "IN"),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereReportObjectNotIn(value []string) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "report_object", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) OrderByReportObject(asc bool) *cmsMemberReportQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "report_object "+order)
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereReportStatus(p mysql.Predicate, value int32) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "report_status", p),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereReportStatusIn(value []int32) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "report_status", "IN"),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereReportStatusNotIn(value []int32) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "report_status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) OrderByReportStatus(asc bool) *cmsMemberReportQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "report_status "+order)
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereHandleStatus(p mysql.Predicate, value int32) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "handle_status", p),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereHandleStatusIn(value []int32) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "handle_status", "IN"),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereHandleStatusNotIn(value []int32) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "handle_status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) OrderByHandleStatus(asc bool) *cmsMemberReportQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "handle_status "+order)
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereNote(p mysql.Predicate, value string) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "note", p),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereNoteIn(value []string) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "note", "IN"),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) WhereNoteNotIn(value []string) *cmsMemberReportQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "note", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cmsMemberReportQueryBuilder) OrderByNote(asc bool) *cmsMemberReportQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "note "+order)
	return qb
}
